<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Youzhe Liu</title>
    <link>https://alanSquirrelyz.github.io/</link>
    <description>Recent content on Youzhe Liu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 12 Jul 2023 16:10:14 -0700</lastBuildDate>
    
	<atom:link href="https://alanSquirrelyz.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>We Media and Academic Research</title>
      <link>https://alanSquirrelyz.github.io/we-media-and-academic-research/</link>
      <pubDate>Wed, 12 Jul 2023 16:10:14 -0700</pubDate>
      
      <guid>https://alanSquirrelyz.github.io/we-media-and-academic-research/</guid>
      <description>&lt;h1 id=&#34;自媒体与学术研究工作&#34;&gt;自媒体与学术研究工作&lt;/h1&gt;
&lt;p&gt;今天看到一个很有意思的说法，做自媒体和学术研究工作很像。我简单思考了一下，确实发现了很多共性。遂深入思考了一下，颇有小小感触，记录一下。&lt;/p&gt;
&lt;p&gt;首先究其根本，两者的性质和原动力十分相似——这大概也是两者在具象上有颇多相似点的原因：学术研究的两大支柱一是个人的兴趣，对领域的研究兴趣和对
研究本身的兴趣，希望能深究某件事物，如果深究的这个问题恰恰又契合于自己在某种条件下产生的好奇点，那就再好不过了，这样的情形下做出的东西往往
还不错，而且研究者大概率不会太痛苦；另一支柱是利益。不管承认与否，学术界的源动力还得是背后的利益驱动，当然有纯粹因为兴趣去研究某个东西的人
存在，但这里说的是学术圈——我不信有这样的研究community能够完全不追逐利益而去做一些似乎没啥用处但是他们本身感兴趣，又捞不到任何好处的研究。&lt;/p&gt;
&lt;p&gt;再来说回自媒体，同样，大多数人做自媒体首要目标是为了赚钱，这一点显而易见但又肯定得不到这些人的认同，也不在此展开，免得挨骂。但是兴趣和
表达欲的驱使确实也是客观存在的事实：我也同样不相信会有人因为为了赚钱而去选择一个完全不喜欢的领域从事自媒体行业，当然也有，但这就不符合大多数人的
人生观了，毕竟很多人做自媒体是业余副业。&lt;/p&gt;
&lt;p&gt;PhD学生很惨，就像某些公司旗下的自媒体个体运营者，拍的内容被限制，还要接受监管，促使稳定产出，收益也大概率不能大部分归到自己名下。
但好处是个人能从中得到很多提升，但风险很大哦，毕竟不是人人都能当上网红滴。而advisor们，显然就是公司的老板啦，虽然不再身体力行去完整自己拍视频、写稿子，
但是推广宣传是他们的首要目标，推销得越好，旗下的视频、文章点击率会越高，再通过其它方式来获得回报。当然，这些公司的manager本身肯定也经历过其中的历练，深谙
运营之道，这是必要前提。&lt;/p&gt;
&lt;p&gt;以上不妨当作看个笑话，信口胡言，不保证真实性和客观性，只是我个人的一些胡思乱想:)。&lt;/p&gt;
&lt;p&gt;说回研究本身和自媒体的共性。这里不妨就用PhD学生完整完成一篇paper和自媒体运营者做出一个视频做个比较。PhD学生们在完成一篇paper之前，肯定要找到一个合适的研究问题：
这个问题不能太老套，但也不能太过于创新，完全是凭空捏造。前者会导致难以有什么吸引人眼球的内容从而被拒稿，后者会导致无人理睬你做的东西，更容易被拒稿，但并不是说后面
这种情况就行不通，很显然行得通，但通了基本都是爆炸性新闻了，比如前几年轰动的AI领域的革命性的进展。大部分人还是选择一个既有的成熟领域，尝试做出一点点创新，
如果能挖个小坑之后再填，那再好不过，自己给自己搭好下一步的桥。&lt;/p&gt;
&lt;p&gt;选好题之后，下一步是尝试，如果做了一段时间就自己发觉行不通，那咋办？还能咋办，只能苦哈哈重新绞尽脑汁想新问题的落脚点。直到最后试出来一个promising的idea，并
开始埋头苦干于这个工作，这一过程事实上并不是最难的，就是会有点掉头发。因为这之中会有很多困难，需要很多技能——而可能有些技能是本身没有的，还要现学现用，总之，
到最后都会一点点打磨自己的工作，并尝试把它做到完美，当作自己的亲生儿子一样看待。&lt;/p&gt;
&lt;p&gt;历经长时间的千难险阻（略过），hopefully你能做出完整的一个工作，并把它投递到某个会议/期刊，心理默默哀求各位观众能够接受你的idea，喜欢你的研究，并且后面能引用
你的paper，那就再好不过啦。结局无非就两个：被接受，皆大欢喜，小小开心一下，开始下一个topic；被拒绝，可能你会把它大修大改一遍，换个平台投一下试试看；或者放弃它，
开始新的idea，新的秃头之旅。&lt;/p&gt;
&lt;p&gt;不用多说，自媒体和这很像啊。&lt;/p&gt;
&lt;p&gt;当然，again，以上是我的胡言乱语，苦中作乐的梦呓，若不幸读到了而且到这里读完了，就当看了一篇鸡汤文，赶紧去漱漱口，看点正儿八经的。&lt;/p&gt;
</description>
    </item>
    
    
    
    
    
    <item>
      <title>Books</title>
      <link>https://alanSquirrelyz.github.io/books/</link>
      <pubDate>Mon, 12 Jun 2023 05:04:10 -0700</pubDate>
      
      <guid>https://alanSquirrelyz.github.io/books/</guid>
      <description>&lt;p&gt;小时候很喜欢看书，那时候不带有目的性，很小的时候喜欢看连环画——这太正常不过，小孩子还能喜欢马克思？有时候妈妈陪我一起看&amp;quot;数学世界&amp;quot;，似乎是这个名字，我觉得还蛮有意思，但不会主动去看。慢慢大一些了，喜欢看科幻小说，小学的时候花了两个月一口气看完了七本哈利波特，晚上写作业的动力都变成了写完可以去看书，还喜欢看一些小说类杂志。那时候真纯粹，想看的就看，想看的时候就看，那时候不会为了知识去读书。书里的东西当然都可以算作知识，所以不妨说那些知识本身就是有吸引力的，也是这些知识塑造了我。&lt;/p&gt;
&lt;p&gt;后来再大一些，变成了中二的文艺青年，散文杂志成了我最主要看的东西，这时候喜欢摘抄一些句子，觉得自己很牛逼。上了高中，高考成了主要的&amp;quot;任务&amp;quot;，这时候阅读带有了一定的目的性，但总体来说还是喜欢看的，高中生活紧凑而些许乏味，阅读是难得的娱乐消遣，毕竟不管看点啥闲书都好过背分子化学式，那些什么什么苯环的结构全被我忘干净了，但是我还记得在一些实事杂志的文章。这时候也爱上了苏轼的词，翻来覆去读了很多苏轼。还读了几乎所有王小波的杂文，那时候写出的作文都变成波味的了。村上春树也成了喜欢的作家，但我记得那时候看了几本村上的小说之后，变得很厌学，后来就不敢看了，现在看日本小说似乎都有这种神奇力量，让人变得闷闷不乐，可能日本文化就是这样吧。家里订了南方周末，那时候中午回家吃完饭，看上几页南方周末上的文章，真的是很幸福的感觉。&lt;/p&gt;
&lt;p&gt;现在怎么就逐渐失去了对阅读的兴趣呢。上了大学，网络和电子设备变成触手可及的工具，这可比读书让人上瘾。互联网包含了世界上&lt;strong&gt;几乎&lt;/strong&gt;所有可触及的信息，而电子设备便捷而快速，我不再需要打开书本来获得消遣，闲不住的时候划划手机，看看水视频，一个小时的无聊时光很快就被消磨掉了。后来试着买了Kindle，上床睡觉前习惯性看上几页催眠，但四年下来似乎也没有读很多本书。20岁的年纪，敢爱感想，但又浮躁、狂热、冲动。&lt;/p&gt;
&lt;p&gt;现在大学毕业一年，来到美国读书，虽然还算是个学生，但也算半只脚跨入了社会，逐渐发现大学的时候喜欢做梦，但不喜欢思考。这当然是正常，也算不上是什么坏事，但我想在23岁出头的现在，也许是时候醒来，不管是噩梦还是美梦，我们都还是要过好现实的生活，决定还是重拾对阅读的热爱，倒不是说读书就是至高无上的爱好，也不是为了获取什么狗屁知识，那些文字本来就是一些载体，只不过是信息的一种编码模式，视频和声音的确也能起到同样的作用，且更快速、信息更有效。但是总觉得生活不应该充满各种意义和成长，阅读本身也应该是我人生时间流逝中的一种生活方式，无意义、但是我享受于其中，这就够了。希望能在孤单而百无聊赖的美国生活、读书生活之余能重新找到那份和读书的愉悦和幸运的感觉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;06/12/2023 失眠的凌晨早晨三点五十&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2023&#34;&gt;2023&lt;/h2&gt;
&lt;h3 id=&#34;六月&#34;&gt;六月&lt;/h3&gt;
&lt;h4 id=&#34;局外人-albert-camus&#34;&gt;《局外人》 Albert Camus&lt;/h4&gt;
&lt;p&gt;在失眠焦虑的很多夜晚和早晨看完了加缪的这部大名鼎鼎的中篇小说。很早就听很多人说过加缪的作品，但一直感觉读不进去。如今身处美国大农村，多了很多独处的机会，独处多了人就容易瞎想，瞎想就会对各种哲学产生一定兴趣。于是决定从这部很催眠的《局外人》开始读起。&lt;/p&gt;
&lt;p&gt;正如很多人介绍这部小说一样，第一句起笔给人冲击确实很大。&lt;em&gt;今天，妈妈死了。也可能是昨天，我不知道。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;简单的文字却让人虎躯一震，第一反应是这也太荒谬了，但是仔细想想近年来在真实世界听闻或经历的魔幻种种，似乎也不荒谬。后来的行文风格也都是类似的白描，很难说是吸引人的一部小说，有时候甚至要耐着性子读进去，才能跟上情节的发展。或者说，似乎也没有什么值得被吸引的情节，整个故事简单而又流畅，奇怪却又平实。整部作品被分成了上下部，上部从主人公默尔索参加母亲的吊唁开始，从他开枪杀死一个阿拉伯人结束，没有明确的时间线，完完全全是由一些琐碎的片段拼凑而成。而作为主人公，默尔索占据了所有的情节主线，但是又似乎游离于情节之外——我看不到他如何带动了情节。当然这是加缪的本意，毕竟默尔索只是一个局外人，这一切之事发生了而已，为什么一定要和他有关系呢？&lt;/p&gt;
&lt;p&gt;// TBD&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Fake Poems</title>
      <link>https://alanSquirrelyz.github.io/fake-poems/</link>
      <pubDate>Tue, 11 Apr 2023 19:44:02 -0700</pubDate>
      
      <guid>https://alanSquirrelyz.github.io/fake-poems/</guid>
      <description>&lt;h3 id=&#34;沈杜公路&#34;&gt;沈杜公路&lt;/h3&gt;
&lt;p&gt;04/11/2023&lt;/p&gt;
&lt;p&gt;列车匆匆穿过&lt;/p&gt;
&lt;p&gt;南京西路咖啡&lt;/p&gt;
&lt;p&gt;古北别墅地基&lt;/p&gt;
&lt;p&gt;一望无尽平原&lt;/p&gt;
&lt;p&gt;孤独又单纯地铁站&lt;/p&gt;
&lt;p&gt;同一趟公交车&lt;/p&gt;
&lt;p&gt;同样吴侬软语&lt;/p&gt;
&lt;p&gt;消失青春岁岁&lt;/p&gt;
&lt;p&gt;消失的鼾声&lt;/p&gt;
&lt;p&gt;埋在闵浦大桥浅滩&lt;/p&gt;
&lt;p&gt;埋在雪花中&lt;/p&gt;
&lt;h3 id=&#34;他&#34;&gt;他&lt;/h3&gt;
&lt;p&gt;05/10/2023
他四天前刚过了23岁生日&lt;/p&gt;
&lt;p&gt;他那一天多巴胺降到冰点&lt;/p&gt;
&lt;p&gt;我在暗处窥探&lt;/p&gt;
&lt;p&gt;觉得可笑又羞愧&lt;/p&gt;
&lt;p&gt;我爱他 这个生活在我身后的影子&lt;/p&gt;
&lt;p&gt;他恨我 这个从不敢看影子的孩子&lt;/p&gt;
&lt;h3 id=&#34;家&#34;&gt;家&lt;/h3&gt;
&lt;p&gt;家里其实什么都没有&lt;/p&gt;
&lt;p&gt;逼仄的餐桌连着台灯&lt;/p&gt;
&lt;p&gt;妈妈的饺子不如餐馆好吃&lt;/p&gt;
&lt;p&gt;但是我实在就馋这一口&lt;/p&gt;
&lt;p&gt;没有二十四小时空调&lt;/p&gt;
&lt;p&gt;黏腻海风微微发潮&lt;/p&gt;
&lt;p&gt;日复一日的生活&lt;/p&gt;
&lt;p&gt;早中晚睡大觉&lt;/p&gt;
&lt;p&gt;隔壁在装修&lt;/p&gt;
&lt;p&gt;没人理睬&lt;/p&gt;
&lt;p&gt;吵死了&lt;/p&gt;
&lt;p&gt;唉&lt;/p&gt;
&lt;p&gt;家里 什么也没有&lt;/p&gt;
&lt;p&gt;但我一离开&lt;/p&gt;
&lt;p&gt;就想回来&lt;/p&gt;
&lt;h3 id=&#34;dopamine&#34;&gt;Dopamine&lt;/h3&gt;
&lt;p&gt;三林没去&lt;/p&gt;
&lt;p&gt;虹梅路没走&lt;/p&gt;
&lt;p&gt;长乐路暴雨&lt;/p&gt;
&lt;p&gt;新乐葱油面&lt;/p&gt;
&lt;p&gt;闵行掠影&lt;/p&gt;
&lt;p&gt;五角场梦境&lt;/p&gt;
&lt;p&gt;三户谁家漂泊&lt;/p&gt;
&lt;p&gt;上榜哪里须知&lt;/p&gt;
&lt;p&gt;梦一场&lt;/p&gt;
&lt;p&gt;怕梦难醒易惊&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Randomized Incremental for Trapezoidal Decomposition</title>
      <link>https://alanSquirrelyz.github.io/randomized-incremental-for-trapezoidal-decomposition/</link>
      <pubDate>Wed, 22 Mar 2023 12:57:07 -0700</pubDate>
      
      <guid>https://alanSquirrelyz.github.io/randomized-incremental-for-trapezoidal-decomposition/</guid>
      <description>&lt;p&gt;check the notes for randomized incremental algorithm for trapezoidal decomposition &lt;a href=&#34;https://alanSquirrelyz.github.io/notes_PDF/TrapezoidalIncremental.pdf&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Cpp Priority_queue_customize</title>
      <link>https://alanSquirrelyz.github.io/cpp-priority_queue_customize/</link>
      <pubDate>Sat, 15 Oct 2022 09:07:01 -0700</pubDate>
      
      <guid>https://alanSquirrelyz.github.io/cpp-priority_queue_customize/</guid>
      <description>&lt;h1 id=&#34;techniques-for-customizing-priority_queue-in-c-stl&#34;&gt;Techniques for customizing &lt;code&gt;priority_queue&lt;/code&gt; in C++ STL&lt;/h1&gt;
&lt;h2 id=&#34;basic&#34;&gt;Basic&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;priority_queue&lt;/code&gt; is a container adaptor in C++ STL. It provides an order for elements in queue, taking the advantage of the data structure &lt;code&gt;heap&lt;/code&gt;. The comparing (the order to keep the queue) can be customized and it is very useful in some cases to make algorithms more quick and efficient. Here are some summarize about the customization, as well as some of mt own understandings.&lt;/p&gt;
&lt;p&gt;Here is the complete initializing template for &lt;code&gt;priority_queue&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;template&amp;lt;
    class T,
    class Container = std::vector&amp;lt;T&amp;gt;,
    class Compare = std::less&amp;lt;typename Container::value_type&amp;gt;
&amp;gt; class priority_queue;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Priority_queue is very supportive solving problems using greedy algorithms. But sometimes the problems are tricky to use a integer only, so priority queue with self-designed order is very sharp for these occasions.&lt;/p&gt;
&lt;p&gt;Some contents are based on &lt;a href=&#34;https://en.cppreference.com/w/cpp/container/priority_queue&#34;&gt;cppreference&lt;/a&gt; and some blogs on Internet.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Basic Valgrind Usage</title>
      <link>https://alanSquirrelyz.github.io/basic-valgrind-usage/</link>
      <pubDate>Mon, 03 Oct 2022 12:08:45 -0700</pubDate>
      
      <guid>https://alanSquirrelyz.github.io/basic-valgrind-usage/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Valgrind is a tool for analysing the instrumental framework for building dynamic analysis tools, developed by Julian Seward.&lt;/p&gt;
&lt;p&gt;Most of the contents in this blog are from the &lt;a href=&#34;https://valgrind.org/&#34;&gt;Valgrind official&lt;/a&gt; website.&lt;/p&gt;
&lt;h2 id=&#34;basic&#34;&gt;Basic&lt;/h2&gt;
&lt;h3 id=&#34;compiling&#34;&gt;Compiling&lt;/h3&gt;
&lt;p&gt;Before using Valgrind, we need to compile our programs with &lt;code&gt;-g&lt;/code&gt; option, which means the compiling will include the
detailed debug informations (Memchecks&amp;rsquo; erroe messgaes with exact line numbers will be included). Note that &lt;code&gt;-O0&lt;/code&gt; and &lt;code&gt;-O1&lt;/code&gt;
also works, while it is not recommended to use &lt;code&gt;-O2&lt;/code&gt; and above.&lt;/p&gt;
&lt;h3 id=&#34;running-under-memcheck&#34;&gt;Running under Memcheck&lt;/h3&gt;
&lt;p&gt;In the normal case we just run our programs as this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;myprog arg1 arg2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we need to run the following command to involve Valgrind:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;valgrind --leak-check=yes myprog arg1 arg2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that in this way our programs may be a lot slower than running dependently since Valgrind needs to detect memory errors.&lt;/p&gt;
&lt;h3 id=&#34;an-example&#34;&gt;An Example&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  #include &amp;lt;stdlib.h&amp;gt;

  void f(void)
  {
     int* x = malloc(10 * sizeof(int));
     x[10] = 0;        // problem 1: heap block overrun
  }                    // problem 2: memory leak -- x not freed

  int main(void)
  {
     f();
     return 0;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The memory messages are like following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;==19182== Invalid write of size 4
==19182==    at 0x804838F: f (example.c:6)
==19182==    by 0x80483AB: main (example.c:11)
==19182==  Address 0x1BA45050 is 0 bytes after a block of size 40 alloc&amp;#39;d
==19182==    at 0x1B8FF5CD: malloc (vg_replace_malloc.c:130)
==19182==    by 0x8048385: f (example.c:5)
==19182==    by 0x80483AB: main (example.c:11)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actually there will be lots of information in each message indelendently, so we need to read them seperately for
finding the detailed error, as well as the bugs related to them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The number in each message denotes the process ID, which is not the key point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first line of each message denotes the type of the error.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following line denotes the position of the error (as stack trace).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All the memory errors may not cause a error for compiler overall. But it is a error, as well as a bug. So it is better to treat them carefully.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;memory-leak&#34;&gt;Memory Leak&lt;/h3&gt;
&lt;p&gt;Here is an example for memory leak problem.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ==19182== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1
  ==19182==    at 0x1B8FF5CD: malloc (vg_replace_malloc.c:130)
  ==19182==    by 0x8048385: f (a.c:5)
  ==19182==    by 0x80483AB: main (a.c:11)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can see from the stack trace where the leaked memory will be allocated, but we cannot know the reason from Memcheck directly.&lt;/p&gt;
&lt;p&gt;The leak will be divided into two types:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;ldquo;definitely lost&amp;rdquo;: it is obvious that the memory was leaked so necessary to fix it.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;probably lost&amp;rdquo;: it also means that the memory is leaked, except some pointer oprations, which are also not smart.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;conditional-jump-or-move-depends-on-uninitialised-values&#34;&gt;&amp;ldquo;Conditional jump or move depends on uninitialised value(s)&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;This is a common message that may happen a lot, which means the uses of uninitialised values. It is difficult to find where the root cause is, but using &lt;code&gt;--track-origin=yes&lt;/code&gt; will tell us extra informations that helps us locate them.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The following part includes some typical error type from Valgrind.&lt;/p&gt;
&lt;h3 id=&#34;illegal-read--illegal-write-errors&#34;&gt;Illegal read / Illegal write errors&lt;/h3&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  Invalid read of size 4
     at 0x40F6BBCC: (within /usr/lib/libpng.so.2.1.0.9)
     by 0x40F6B804: (within /usr/lib/libpng.so.2.1.0.9)
     by 0x40B07FF4: read_png_image__FP8QImageIO (kernel/qpngio.cpp:326)
     by 0x40AC751B: QImageIO::read() (kernel/qimage.cpp:3621)
     Address 0xBFFFF0E0 is not stack&amp;#39;d, malloc&amp;#39;d or free&amp;#39;d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This happens when the program reads or writes memory at a plce which Memcheck reckons it shouldn&amp;rsquo;t. Normally when you try to read or write pointed to a part that has already been freed, you&amp;rsquo;ll be informed with this message.&lt;/p&gt;
&lt;p&gt;In some cases, the program will lives well with the actually not valid access since we are allowed to read or write to a garbage area (non-fatal error). So when something goes wrong with the output, we may just check the Valgrind output to see whether there is a memory read/write error.&lt;/p&gt;
&lt;h3 id=&#34;use-of-uninitialised-values&#34;&gt;Use of uninitialised values&lt;/h3&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  Conditional jump or move depends on uninitialised value(s)
     at 0x402DFA94: _IO_vfprintf (_itoa.h:49)
     by 0x402E8476: _IO_printf (printf.c:36)
     by 0x8048472: main (tests/manuel1.c:8)
     by 0x402A6E5E: __libc_start_main (libc-start.c:129)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;`Uninitialsed value&amp;rsquo; is also a common error that is not easy to find. Sometimes the variable will be read with wrong value thought the memory access is valid.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here is an error that is not easy to be found but easy to appear: sometimes we put several judge statement in a single &lt;code&gt;if&lt;/code&gt;, then the more necessary conditions
conditions should be put first, i.e., the conditions rely on the previous one should be placed after.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;illegal-frees&#34;&gt;Illegal frees&lt;/h3&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  Invalid free()
     at 0x4004FFDF: free (vg_clientmalloc.c:577)
     by 0x80484C7: main (tests/doublefree.c:10)
     by 0x402A6E5E: __libc_start_main (libc-start.c:129)
     by 0x80483B1: (within tests/doublefree)
     Address 0x3807F7B4 is 0 bytes inside a block of size 177 free&amp;#39;d
     at 0x4004FFDF: free (vg_clientmalloc.c:577)
     by 0x80484C7: main (tests/doublefree.c:10)
     by 0x402A6E5E: __libc_start_main (libc-start.c:129)
     by 0x80483B1: (within tests/doublefree)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Memcheck keeps track of the blocks allocated by your program with malloc/new, so it can know exactly whether or not the argument to free/delete is legitimate or not. Here, this test program has freed the same block twice. As with the illegal read/write errors, Memcheck attempts to make sense of the address free&amp;rsquo;d. If, as here, the address is one which has previously been freed, you wil be told that &amp;ndash; making duplicate frees of the same block easy to spot.&lt;/p&gt;
&lt;h3 id=&#34;overlapping-source-and-destination-blocks&#34;&gt;Overlapping source and destination blocks&lt;/h3&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;==27492== Source and destination overlap in memcpy(0xbffff294, 0xbffff280, 21)
==27492==    at 0x40026CDC: memcpy (mc_replace_strmem.c:71)
==27492==    by 0x804865A: main (overlap.c:40)
==27492==    by 0x40246335: __libc_start_main (../sysdeps/generic/libc-start.c:129)
==27492==    by 0x8048470: (within /auto/homes/njn25/grind/head6/memcheck/tests/overlap)
==27492== 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The C library functions above copy some data from one memory block to another (or something similar): memcpy(), strcpy(), strncpy(), strcat(), strncat(). The blocks pointed to by their src and dst pointers aren&amp;rsquo;t allowed to overlap. Memcheck checks for this.&lt;/p&gt;
&lt;h2 id=&#34;some-tricks&#34;&gt;Some Tricks&lt;/h2&gt;
&lt;h3 id=&#34;how-to-stop-at-the-first-error&#34;&gt;How to Stop at the First Error&lt;/h3&gt;
&lt;p&gt;If we want to stop at the console to see where the error occured:&lt;/p&gt;
&lt;p&gt;Use the parameter : &lt;code&gt;--gen-suppressions=yes&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;some-tutorials&#34;&gt;Some tutorials:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://valgrind.org/docs/manual/manual.html&#34;&gt;https://valgrind.org/docs/manual/manual.html&lt;/a&gt;
&lt;a href=&#34;http://cs.ecs.baylor.edu/~donahoo/tools/valgrind/&#34;&gt;http://cs.ecs.baylor.edu/~donahoo/tools/valgrind/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    
  </channel>
</rss>
